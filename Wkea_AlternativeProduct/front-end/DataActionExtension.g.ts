
    /*!
    * Copyright (c) Microsoft Corporation.
    * All rights reserved. See LICENSE in the project root for license information.
    * THIS FILE IS AN AUTOGENERATED TYPESCRIPT PROXY EXTENSION.
    * TO USE THIS FILE, IT MUST BE ADDED TO A D365COMMERCE APPLICATION
    */
    // tslint:disable
    import { AsyncResult, callActionOrExecute, DataServiceQuery, IContext, IDataServiceRequest, IQueryResultSettings, NullResult } from '@msdyn365-commerce/retail-proxy';
    // @ts-ignore
    import * as EntityClasses from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceModels.g';
    import * as Entities from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
    import * as DataServiceEntities from './DataServiceEntities.g';

    
    function generateWeChatPayQrCodeQuery(): DataServiceQuery {
          return new DataServiceQuery();
          }
    
    
    export function generateWeChatPayQrCodeInput (
        cartId:
            string
    ): IDataServiceRequest {
      const query = generateWeChatPayQrCodeQuery();
      return query.createDataServiceRequestForOperation(
          'GenerateWeChatPayQrCode',
          true, 
            DataServiceEntities.WeChatPayQrCodeInfoExtensionClass
          ,
          'false',
          { bypassCache: 'get', returnEntity: 'DataServiceEntities.IWeChatPayQrCodeInfo' },
          { 
          cartId: cartId
          }
      );
    }
   
    export function generateWeChatPayQrCodeAsync (
        context: IContext, cartId:
            string
        ): AsyncResult<DataServiceEntities.IWeChatPayQrCodeInfo> {
        const request = generateWeChatPayQrCodeInput(cartId);
        return callActionOrExecute<DataServiceEntities.IWeChatPayQrCodeInfo>(request, context.callerContext);
        }
      
    function retrieveWeChatPayResultQuery(): DataServiceQuery {
          return new DataServiceQuery();
          }
    
    
    export function retrieveWeChatPayResultInput (
        resultAccessCode:
            string,
            cartId:
            string
    ): IDataServiceRequest {
      const query = retrieveWeChatPayResultQuery();
      return query.createDataServiceRequestForOperation(
          'RetrieveWeChatPayResult',
          true, 
            DataServiceEntities.WeChatPayResultExtensionClass
          ,
          'false',
          { bypassCache: 'get', returnEntity: 'DataServiceEntities.IWeChatPayResult' },
          { 
          resultAccessCode: resultAccessCode,
            cartId: cartId
          }
      );
    }
   
    export function retrieveWeChatPayResultAsync (
        context: IContext, resultAccessCode:
            string,
            cartId:
            string
        ): AsyncResult<DataServiceEntities.IWeChatPayResult> {
        const request = retrieveWeChatPayResultInput(resultAccessCode, cartId);
        return callActionOrExecute<DataServiceEntities.IWeChatPayResult>(request, context.callerContext);
        }
      
       
        // @ts-ignore
        function wKEAProductsQuery(itemId?: string): DataServiceQuery {
        const key = (itemId) ? { ItemId: itemId } :null;
        return new DataServiceQuery("WKEAProducts", "WKEAProductExtended", DataServiceEntities.WKEAProductExtendedExtensionClass, key);
        }

        
    export function createGetWKEAProductsExtendedInput(queryResultSettings: IQueryResultSettings, itemId: string, productId: number): IDataServiceRequest {
    const query = wKEAProductsQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetWKEAProductsExtended', false, DataServiceEntities.WKEAProductExtendedExtensionClass, 'true', {bypassCache: 'none', returnEntity: 'DataServiceEntities.IWKEAProductExtended'}, {itemId: itemId, productId: productId });
    }

    
    export function getWKEAProductsExtendedAsync(context: IContext, itemId: string, productId: number): AsyncResult<DataServiceEntities.IWKEAProductExtended[]> {
    const request = createGetWKEAProductsExtendedInput(
      context.queryResultSettings || {}, itemId, productId);
    return callActionOrExecute<DataServiceEntities.IWKEAProductExtended[]>(request, context.callerContext);
    }
  